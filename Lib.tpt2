; GENERAL INFO
; Collection of Macros and Lua Code shared across multiple Ir Scripts.
; First I wanted to create a separate Lib for every use, but decided against it,
; as it would be tiresome for users to copy each lib. So now evertyhing is here.

; NAME
:name Ir.Lib

; ________________________________________BASIC________________________________________
#lb {
#rb }
#portArr(name) #{name}(index) {lb}lua(return {name}[{lb}index{rb}]){rb}
{lua(\
  function wrap(str)\
    return '('..str..')'\
  end\
  function port(name, args)\
    local function punct(fun, i)\
      return (i < 2 and '' or fun(i - 1)..', ')\
    end\
    local function input(i)\
      return punct(input, i)..'arg'..i\
    end\
    local function pass(i)\
      return punct(pass, i)..'{lb}arg'..i..'{rb}'\
    end\
    local function call(str)\
      return (args < 1 or str == '') and '' or wrap(str)\
    end\
    return '#'..name..call(input(args))..\
      ' {lb}lua(return '..name..call(pass(args))..'){rb}'\
  end\
  function c2I(c)\
    return 'index("0123456789", '..c..', 0)'\
  end\
  function index2I(str, index)\
    return c2I('sub('..str..', '..index..', 1)')\
  end\
  function s2I(str, c_len)\
    local c_len = c_len - 1\
    return (0 < c_len and '('..s2I(str, c_len)..') * 10 + ' or '')..index2I(str, c_len)\
  end\
)}
#portLua(name, args) {lua(return port('{name}', {args}))}
{portLua(c2I, 1)}
{portLua(index2I, 2)}
{portLua(s2I, 2)}

; TESTING
;s = {s2I('"123"', 3)}

; ________________________________________DUST________________________________________
; SETTINGS
  #ratioTarget {lb}476,476,298,238,38,30,5,5,1,1{rb}
  #ratioFinalDigits 5
  #lumpsToSave 1.
  #hasChemicalLumps 1

; LUA
  {lua(\
    local dustVal = {}\
    local ratioVal = {}\
    local ratioSum = 0\
    for i = 1, 10 do\
      dustVal[i] = (8 - 4 * {hasChemicalLumps}) ^ (i - 1)\
      ratioVal[i] = ({ratioTarget})[i] * dustVal[i]\
      ratioSum = ratioSum + ratioVal[i]\
    end\
    local bigNum = 10 ^ {ratioFinalDigits}\
    local ratioTrunc = {}\
    local ratioTruncSum = 0\
    for i = 1, 10 do\
      ratioTrunc[i] = math.floor(ratioVal[i] / ratioSum * bigNum)\
      ratioTruncSum = ratioTruncSum + ratioTrunc[i]\
    end\
    local currentValC = {}\
    for i = 1, 10 do\
      local function dustUsable(i)\
        return wrap('count("dust", '..i..') - 2.')\
      end\
      currentValC[i] = i < 2 and dustUsable(i) or wrap('('..dustUsable(i)..\
        ' + (count("lump", '..(i - 1)..') - {lumpsToSave}) * 2.) * '..dustVal[i])\
    end\
    local function valHighHelper(c_i, str)\
      return ' + if('..(c_i - 1)..' < tierLower, 0., '..str..')'\
    end\
    local function currentValHighF(c_i)\
      return currentValC[c_i + 1]..(c_i < 2 and '' or\
        valHighHelper(c_i, currentValHighF(c_i - 1)))\
    end\
    currentValHigh = wrap(currentValHighF(9))\
    function dustSetUp(boiler)\
      local function targetValHighF(c_i)\
        return tostring((ratioTrunc[c_i + 1] + (bigNum - ratioTruncSum <\
          (boiler == 0 and c_i + 1 or 10 - c_i) and 0 or 1)) / bigNum)..(c_i < 2 and '' or\
            valHighHelper(c_i, targetValHighF(c_i - 1)))\
      end\
      local function currentValHighC(c_t)\
        return currentValC[c_t + 1]..(8 < c_t and '' or ' + '..currentValHighC(c_t + 1))\
      end\
      targetValHigh = wrap(wrap(currentValHighC(0))..' * '..wrap(targetValHighF(9)))\
    end\
  )}
  {portLua(dustSetUp, 1)}
  {portLua(currentValHigh, 0)}
  {portLua(targetValHigh, 0)}

; MACROS
  #lumps count("lump", tierLower)

; TESTING
